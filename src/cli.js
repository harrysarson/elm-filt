import meow from 'meow';
import log from 'log';
import logNode from 'log-node';

import fs from 'fs-extra';
import {detectElmVersion, filters, ElmFiltError} from './lib';

async function main() {
	logNode();

	const cli = meow(
		`
    Usage
      $ elm-filt <source> --keep <elm function>
    Examples
      $ elm-filt elm.js --keep Main.main --keep Main.update
      TODO
    `,
		{
			flags: {
				keep: {
					type: 'string'
				}
			}
		}
	);

	if (cli.input.length !== 1) {
		throw new ElmFiltError(`${
			cli.input.length
		} paths to JavaScript files generated by elm have be provided.
    Exactly 1 path must be provided. ${
			cli.input === []
				? ''
				: `Provided paths: ${['', ...cli.input].join('\n  - ')}`
		}`);
	}

	if (cli.flags.keep === undefined) {
		throw new ElmFiltError(
			'One or more fully qualified elm function names must be provided.'
		);
	}

	const keep = (x => (typeof x === 'string' ? [x] : x))(cli.flags.keep);
	const input = cli.input[0];

	const source = await (async () => {
		try {
			return await fs.readFile(input, 'utf8');
		} catch (error) {
			throw new ElmFiltError(
				`The path ${input} could not be read! Details:\n${error}`
			);
		}
	})();

	const version = (() => {
		try {
			return detectElmVersion(source);
		} catch (error) {
			if (error.supportedElmVersions === undefined) {
				throw new ElmFiltError(
					`Unkown error when attempting to recognise ${input}! Details:\n${error}`
				);
			} else {
				throw new ElmFiltError(`The JavaScript file at ${input} does not contain the output of a supported elm compiler.
The following elm compiler versions are supported:${[
					'',
					...error.supportedElmVersions
				].join('\n  - ')}`);
			}
		}
	})();

	const filtered = filters[version]({
		source,
		packageName: 'author/project',
		keeps: keep
	});

	for (const {elmIdentifier, javascript} of filtered) {
		process.stdout.write(`
// For ${elmIdentifier}
${javascript}
`);
	}
}

main().catch(error => {
	if (error.elmFiltError === true) {
		log.error(error.message);
		process.exit(2); // eslint-disable-line unicorn/no-process-exit
	} else {
		log.error(error);
		process.exit(3); // eslint-disable-line unicorn/no-process-exit
	}
});
